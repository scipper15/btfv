name: Create Issue and Rename Branch

# Grant the workflow permission to write to the repository
permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

on:
  push:
    branches:
      - "feat/*"    # Trigger on feature branches
      - "fix/*"     # Trigger on fix branches
      - "docs/*"    # Trigger on docs branches
      - "chore/*"   # Trigger on chore branches

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Git
      uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Determine Label Based on Branch Type
      id: determine-label
      run: |
        branch_name="${GITHUB_REF#refs/heads/}"
        case "$branch_name" in
          feat/*)
            echo "::set-output name=label::feat"
            ;;
          fix/*)
            echo "::set-output name=label::bug"
            ;;
          docs/*)
            echo "::set-output name=label::docs"
            ;;
          chore/*)
            echo "::set-output name=label::chore"
            ;;
          *)
            echo "::set-output name=label::enhancement"
            ;;
        esac

    - name: Check if Issue Already Exists
      id: check-issue
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        branch_name="${GITHUB_REF#refs/heads/}"
        # Query GitHub API to search for issues with the branch name in the title
        existing_issues=$(curl -s -H "Authorization: token $GH_TOKEN" \
        "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=${{ steps.determine-label.outputs.label }}")

        # Check if the issue already exists by looking for a matching branch name in the title
        issue_exists=$(echo "$existing_issues" | jq --arg branch "$branch_name" '[.[] | select(.title | contains($branch))] | length')

        echo "Issues found: $issue_exists"
        echo "::set-output name=issue_exists::$issue_exists"

    - name: Create GitHub Issue if not exists
      if: steps.check-issue.outputs.issue_exists == '0'
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        branch_name="${GITHUB_REF#refs/heads/}"

        # Create the issue and store the response
        issue_response=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
        -d "{\"title\":\"New branch: $branch_name\",\"body\":\"An issue corresponding to branch $branch_name was automatically created.\",\"labels\":[\"${{ steps.determine-label.outputs.label }}\"]}" \
        https://api.github.com/repos/${{ github.repository }}/issues)

        # Extract the issue number from the response
        issue_number=$(echo $issue_response | jq -r '.number')

        # Log the issue number
        echo "Issue number: $issue_number"

        # Rename the branch to include the issue number
        new_branch_name="feature/$issue_number/$branch_name"

        # Set up GitHub Actions bot credentials
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions Bot"

        # Rename the branch locally
        git branch -m $new_branch_name

        # Push the renamed branch to the remote repository using GITHUB_TOKEN
        git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }} $new_branch_name --force-with-lease
