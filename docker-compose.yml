
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - btfv
    env_file:
      - .env.dev
    profiles:
      - dev
      - test
      - prod

  scraper:
    build:
      context: .
      dockerfile: src/scraper/Dockerfile
    environment:
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
      - PYTHONPATH=${PYTHONPATH}
      - LOGGING_ENV=${LOGGING_ENV}

      - SYNC_URL=${SYNC_URL}
      - ASYNC_URL=${ASYNC_URL}

      - SCRAPER_INTERVAL=${SCRAPER_INTERVAL}
    volumes:
      - ./data:/app/data
    depends_on:
      - db
    networks:
      - btfv
    env_file:
      - .env.dev
    profiles:
      - dev
      - test
      - prod

  web:
    build:
      context: .
      dockerfile: src/web_app/Dockerfile
    environment:
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
      - PYTHONPATH=${PYTHONPATH}
      - LOGGING_ENV=${LOGGING_ENV}

      - SYNC_URL=${SYNC_URL}
      - ASYNC_URL=${ASYNC_URL}
      - FLASK_DEBUG=1
    env_file:
      - .env.dev
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./data:/app/data
      - ./src:/app/src
    command: poetry run gunicorn "web_main:app" --bind 0.0.0.0:8000 --workers 4 --reload
    depends_on:
      - db
    networks:
      - btfv
    ports:
      - "8000:8000"
    profiles:
      - dev
      - test
      - prod

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    networks:
      - btfv
    env_file:
      - .env.dev
    profiles:
      - dev
      - test

networks:
  btfv:

volumes:
  db-data:
  data:
